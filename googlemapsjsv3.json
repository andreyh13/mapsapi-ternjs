{
  "!name": "googlemapsjsv3",
  "!define": {
    "MapOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#MapOptions",
      "backgroundColor": "string",
      "center": "google.maps.LatLng",
      "disableDefaultUI": "bool",
      "disableDoubleClickZoom": "bool",
      "draggable": "bool",
      "draggableCursor": "string",
      "draggingCursor": "string",
      "heading": "number",
      "keyboardShortcuts": "bool",
      "mapMaker": "bool",
      "mapTypeControl": "bool",
      "mapTypeControlOptions": "MapTypeControlOptions",
      "mapTypeId": "MapTypeId",
      "maxZoom": "number",
      "minZoom": "number",
      "noClear": "bool",
      "overviewMapControl": "bool",
      "overviewMapControlOptions": "OverviewMapControlOptions",
      "panControl": "bool",
      "panControlOptions": "PanControlOptions",
      "rotateControl": "bool",
      "rotateControlOptions": "RotateControlOptions",
      "scaleControl": "bool",
      "scaleControlOptions": "ScaleControlOptions",
      "scrollwheel": "bool",
      "streetView": "google.maps.StreetViewPanorama",
      "streetViewControl": "bool",
      "streetViewControlOptions": "StreetViewControlOptions",
      "styles": "[MapTypeStyle]",
      "tilt": "number",
      "zoom": "number",
      "zoomControl": "bool",
      "zoomControlOptions": "ZoomControlOptions"
    },
    "bounds_changed": "string",
    "center_changed": "string",
    "click": "string",
    "dblclick": "string",
    "drag": "string",
    "dragend": "string",
    "dragstart": "string",
    "heading_changed": "string",
    "idle": "string",
    "maptypeid_changed": "string",
    "mousemove": "string",
    "mouseout": "string",
    "mouseover": "string",
    "projection_changed": "string",
    "resize": "string",
    "rightclick": "string",
    "tilesloaded": "string",
    "tilt_changed": "string",
    "zoom_changed": "string",
    "addfeature": "string",
    "mousedown": "string",
    "mouseup": "string",
    "removefeature": "string",
    "removeproperty": "string",
    "setgeometry": "string",
    "setproperty": "string",
    "MapTypeControlOptions" : {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#MapTypeControlOptions",
      "mapTypeIds": "[google.maps.MapTypeId]",
      "mapTypeIds": "[string]",
      "position": "google.maps.ControlPosition",
      "style": "google.maps.MapTypeControlStyle"
    },
    "OverviewMapControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#OverviewMapControlOptions",
      "opened": "bool"
    },
    "PanControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#PanControlOptions",
      "position": "google.maps.ControlPosition"
    },
    "RotateControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#RotateControlOptions",
      "position": "google.maps.ControlPosition"
    },
    "ScaleControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#ScaleControlOptions",
      "style": "google.maps.ScaleControlStyle"
    },
    "StreetViewControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#StreetViewControlOptions",
      "position": "google.maps.ControlPosition" 
    },
    "ZoomControlOptions": {
      "!url": "https://developers.google.com/maps/documentation/javascript/reference#ZoomControlOptions",
      "position": "google.maps.ControlPosition",
      "style": "google.maps.ZoomControlStyle"
    },
    "Data": {
      "DataOptions": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data.DataOptions",
        "map": "google.maps.Map",
        "style": "Data.StylingFunction",
        "style": "Data.StyleOptions"
      },
      "FeatureOptions": {

      },
      "GeoJsonOptions": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data.GeoJsonOptions",
        "idPropertyName": "string"
      },
      "StylingFunction": {
        "!type": "fn() -> Data.StyleOptions",
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data.StylingFunction"
      },
      "StyleOptions": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data.StyleOptions",
        "clickable": {
          "!type": "bool",
          "!doc": "If true, the marker receives mouse and touch events. Default value is true."
        },
        "cursor": {
          "!type": "string",
          "!doc": "Mouse cursor to show on hover. Only applies to point geometries."
        },
        "fillColor": {
          "!type": "string",
          "!doc": "The fill color. All CSS3 colors are supported except for extended named colors. Only applies to polygon geometries."
        },
        "fillOpacity": {
          "!type": "number",
          "!doc": "The fill opacity between 0.0 and 1.0. Only applies to polygon geometries."
        },
        "icon": {
          "!type": "string",
          "!doc": "Icon for the foreground. If a string is provided, it is treated as though it were an Icon with the string as url. Only applies to point geometries."
        },
        "icon": {
          "!type": "Icon",
          "!doc": "Icon for the foreground. If a string is provided, it is treated as though it were an Icon with the string as url. Only applies to point geometries."
        },
        "icon": {
          "!type": "Symbol",
          "!doc": "Icon for the foreground. If a string is provided, it is treated as though it were an Icon with the string as url. Only applies to point geometries."
        },
        "shape": {
          "!type": "MarkerShape",
          "!doc": "Defines the image map used for hit detection. Only applies to point geometries."
        },
        "strokeColor": {
          "!type": "string",
          "!doc": "The stroke color. All CSS3 colors are supported except for extended named colors. Only applies to line and polygon geometries."
        },
        "strokeOpacity": {
          "!type": "number",
          "!doc": "The stroke opacity between 0.0 and 1.0. Only applies to line and polygon geometries."
        },
        "strokeWeight": {
          "!type": "number",
          "!doc": "The stroke width in pixels. Only applies to line and polygon geometries."
        },
        "title": {
          "!type": "string",
          "!doc": "Rollover text. Only applies to point geometries."
        },
        "visible": {
          "!type": "bool",
          "!doc": "Whether the feature is visible. Defaults to true."
        },
        "zIndex": {
          "!type": "number",
          "!doc": "All features are displayed on the map in order of their zIndex, with higher values displaying in front of features with lower values. Markers are always displayed in front of line-strings and polygons."
        } 
      }
    }
  },
  "google": {
    "maps": {
      "version": "string",
      "Map": {
        "!type": "fn(mapDiv: Node, opts?: MapOptions) -> +google.maps.Map",
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
        "!doc": "Creates a new map inside of the given HTML container, which is typically a DIV element.",
        "prototype": {
          "fitBounds": {
            "!type": "fn(bounds: LatLngBounds)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Sets the viewport to contain the given bounds."
          },
          "getBounds": {
            "!type": "fn() -> google.maps.LatLngBounds",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the lat/lng bounds of the current viewport. If more than one copy of the world is visible, the bounds range in longitude from -180 to 180 degrees inclusive. If the map is not yet initialized (i.e. the mapType is still null), or center and zoom have not been set then the result is null or undefined."
          },
          "getCenter": {
            "!type": "fn() -> google.maps.LatLng",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the position displayed at the center of the map. Note that this LatLng object is not wrapped. See LatLng for more information."
          },
          "getDiv": {
            "!type": "fn() -> Node",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "getHeading": {
            "!type": "fn() -> number",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the compass heading of aerial imagery. The heading value is measured in degrees (clockwise) from cardinal direction North."
          },
          "getMapTypeId": {
            "!type": "fn() -> string",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "getProjection": {
            "!type": "fn() -> google.maps.Projection",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the current Projection. If the map is not yet initialized (i.e. the mapType is still null) then the result is null. Listen to projection_changed and check its value to ensure it is not null."
          },
          "getStreetView": {
            "!type": "fn() -> google.maps.StreetViewPanorama",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the default StreetViewPanorama bound to the map, which may be a default panorama embedded within the map, or the panorama set using setStreetView(). Changes to the map's streetViewControl will be reflected in the display of such a bound panorama."
          },
          "getTilt": {
            "!type": "fn() -> number",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Returns the current angle of incidence of the map, in degrees from the viewport plane to the map plane. The result will be 0 for imagery taken directly overhead or 45 for 45° imagery. 45° imagery is only available for SATELLITE and HYBRID map types, within some locations, and at some zoom levels. Note: This method does not return the value set by setTilt. See setTilt for details."
          },
          "getZoom": {
            "!type": "fn() -> number",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "panBy": {
            "!type": "fn(x: number, y: number)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Changes the center of the map by the given distance in pixels. If the distance is less than both the width and height of the map, the transition will be smoothly animated. Note that the map coordinate system increases from west to east (for x values) and north to south (for y values)."
          },
          "panTo": {
            "!type": "fn(latLng: google.maps.LatLng)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Changes the center of the map to the given LatLng. If the change is less than both the width and height of the map, the transition will be smoothly animated."
          },
          "panTo": {
            "!type": "fn(latLng: LatLngLiteral)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Changes the center of the map to the given LatLng. If the change is less than both the width and height of the map, the transition will be smoothly animated."
          },
          "panToBounds": {
            "!type": "fn(latLngBounds: google.maps.LatLngBounds)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Pans the map by the minimum amount necessary to contain the given LatLngBounds. It makes no guarantee where on the map the bounds will be, except that as much of the bounds as possible will be visible. The bounds will be positioned inside the area bounded by the map type and navigation (pan, zoom, and Street View) controls, if they are present on the map. If the bounds is larger than the map, the map will be shifted to include the northwest corner of the bounds. If the change in the map's position is less than both the width and height of the map, the transition will be smoothly animated."
          },
          "setCenter": {
            "!type": "fn(latlng: google.maps.LatLng)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "setCenter": {
            "!type": "fn(latlng: LatLngLiteral)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "setHeading": {
            "!type": "fn(heading: number)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Sets the compass heading for aerial imagery measured in degrees from cardinal direction North."
          },
          "setMapTypeId": {
            "!type": "fn(mapTypeId: google.maps.MapTypeId)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "setMapTypeId": {
            "!type": "fn(mapTypeId: string)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "setOptions": {
            "!type": "fn(options: MapOptions)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "setStreetView": {
            "!type": "fn(panorama: google.maps.StreetViewPanorama)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Binds a StreetViewPanorama to the map. This panorama overrides the default StreetViewPanorama, allowing the map to bind to an external panorama outside of the map. Setting the panorama to null binds the default embedded panorama back to the map."
          },
          "setTilt": {
            "!type": "fn(tilt: number)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Controls the automatic switching behavior for the angle of incidence of the map. The only allowed values are 0 and 45. setTilt(0) causes the map to always use a 0° overhead view regardless of the zoom level and viewport. setTilt(45) causes the tilt angle to automatically switch to 45 whenever 45° imagery is available for the current zoom level and viewport, and switch back to 0 whenever 45° imagery is not available (this is the default behavior). 45° imagery is only available for SATELLITE and HYBRID map types, within some locations, and at some zoom levels. Note: getTilt returns the current tilt angle, not the value set by setTilt. Because getTilt and setTilt refer to different things, do not bind() the tilt property; doing so may yield unpredictable effects."
          },
          "setZoom": {
            "!type": "fn(zoom: number)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": ""
          },
          "controls": {
            "!type": "[google.maps.MVCArray]",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Additional controls to attach to the map. To add a control to the map, add the control's <div> to the MVCArray corresponding to the ControlPosition where it should be rendered."
          },
          "data": {
            "!type": "google.maps.Data",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "An instance of Data, bound to the map. Add features to this Data object to conveniently display them on this map"
          },
          "mapTypes": {
            "!type": "google.maps.MapTypeRegistry",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "A registry of MapType instances by string ID."
          },
          "overlayMapTypes": {
            "!type": "google.maps.MVCArray",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Map",
            "!doc": "Additional map types to overlay."
          }
        }
      },
      "MapTypeId": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#MapTypeId",
        "HYBRID": "string",
        "ROADMAP": "string",
        "SATELLITE": "string",
        "TERRAIN": "string"
      },
      "MapTypeControlStyle": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#MapTypeControlStyle",
        "DEFAULT": "string",
        "DROPDOWN_MENU": "string",
        "HORIZONTAL_BAR": "string"
      },
      "ScaleControlStyle": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#ScaleControlStyle",
        "DEFAULT": "string"  
      },
      "ZoomControlStyle": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#ZoomControlStyle",
        "DEFAULT": "string",
        "LARGE": "string",
        "SMALL": "string"
      },
      "ControlPosition": {
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#ControlPosition",
        "BOTTOM_CENTER": "string",
        "BOTTOM_LEFT": "string",
        "BOTTOM_RIGHT": "string",
        "LEFT_BOTTOM": "string",
        "LEFT_CENTER": "string",
        "LEFT_TOP": "string",
        "RIGHT_BOTTOM": "string",
        "RIGHT_CENTER": "string",
        "RIGHT_TOP": "string",
        "TOP_CENTER": "string",
        "TOP_LEFT": "string",
        "TOP_RIGHT": "string"
      },
      "Data": {
        "!type": "fn(options?: Data.DataOptions) -> +google.maps.Data",
        "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
        "!doc": "Creates an empty collection, with the given DataOptions. Every Map has a Data object by default, so most of the time there is no need to construct one.",
        "prototype": {
          "add": {
            "!type": "fn(feature: google.maps.Data.Feature) -> google.maps.Data.Feature",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Adds a feature to the collection, and returns the added feature. If the feature has an ID, it will replace any existing feature in the collection with the same ID. If no feature is given, a new feature will be created with null geometry and no properties. If FeatureOptions are given, a new feature will be created with the specified properties. Note that the IDs 1234 and '1234' are equivalent. Adding a feature with ID 1234 will replace a feature with ID '1234', and vice versa."
          },
          "add": {
            "!type": "fn(feature: Data.FeatureOptions) -> google.maps.Data.Feature",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Adds a feature to the collection, and returns the added feature. If the feature has an ID, it will replace any existing feature in the collection with the same ID. If no feature is given, a new feature will be created with null geometry and no properties. If FeatureOptions are given, a new feature will be created with the specified properties. Note that the IDs 1234 and '1234' are equivalent. Adding a feature with ID 1234 will replace a feature with ID '1234', and vice versa."
          },
          "addGeoJson": {
            "!type": "fn(geoJson: Object, options?: Data.GeoJsonOptions) -> [google.maps.Data.Feature]",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Adds GeoJSON features to the collection. Give this method a parsed JSON. The imported features are returned. Throws an exception if the GeoJSON could not be imported."
          },
          "contains": {
            "!type": "fn(feature: google.maps.Data.Feature) -> bool",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Checks whether the given feature is in the collection."
          },
          "forEach": {
            "!type": "fn(callback: fn(feature: google.maps.Data.Feature))",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Repeatedly invokes the given function, passing a feature in the collection to the function on each invocation. The order of iteration through the features is undefined."
          },
          "getFeatureById": {
            "!type": "fn(id: number) -> google.maps.Data.Feature",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Returns the feature with the given ID, if it exists in the collection. Otherwise returns undefined. Note that the IDs 1234 and '1234' are equivalent. Either can be used to look up the same feature."
          },
          "getFeatureById": {
            "!type": "fn(id: string) -> google.maps.Data.Feature",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Returns the feature with the given ID, if it exists in the collection. Otherwise returns undefined. Note that the IDs 1234 and '1234' are equivalent. Either can be used to look up the same feature."
          },
          "getMap": {
            "!type": "fn() -> google.maps.Map",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Returns the map on which the features are displayed."
          },
          "getStyle": {
            "!type": "fn() -> Data.StylingFunction",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Gets the style for all features in the collection."
          },
          "getStyle": {
            "!type": "fn() -> Data.StyleOptions",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Gets the style for all features in the collection."
          },
          "loadGeoJson": {
            "!type": "fn(url: string, options?: Data.GeoJsonOptions, callback?: fn(features: [google.maps.Data.Feature]))",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Loads GeoJSON from a URL, and adds the features to the collection."
          },
          "overrideStyle": {
            "!type": "fn(feature: google.maps.Data.Feature, style: Data.StyleOptions)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Changes the style of a feature. These changes are applied on top of the style specified by setStyle(). Style properties set to null revert to the value specified via setStyle()."
          },
          "remove": {
            "!type": "fn(feature: google.maps.Data.Feature)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Removes a feature from the collection."
          },
          "revertStyle": {
            "!type": "fn(feature?: google.maps.Data.Feature)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Removes the effect of previous overrideStyle() calls. The style of the given feature reverts to the style specified by setStyle(). If no feature is given, all features have their style reverted."
          },
          "setMap": {
            "!type": "fn(map: google.maps.Map)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Renders the features on the specified map. If map is set to null, the features will be removed from the map."
          },
          "setStyle": {
            "!type": "fn(style: Data.StylingFunction)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Sets the style for all features in the collection. Styles specified on a per-feature basis via overrideStyle() continue to apply. Pass either an object with the desired style options, or a function that computes the style for each feature. The function will be called every time a feature's properties are updated."
          },
          "setStyle": {
            "!type": "fn(style: Data.StyleOptions)",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Sets the style for all features in the collection. Styles specified on a per-feature basis via overrideStyle() continue to apply. Pass either an object with the desired style options, or a function that computes the style for each feature. The function will be called every time a feature's properties are updated."
          },
          "toGeoJson": {
            "!type": "fn(callback: fn(json: Object))",
            "!url": "https://developers.google.com/maps/documentation/javascript/reference#Data",
            "!doc": "Exports the features in the collection to a GeoJSON object."
          }
        }
      }

    }
  }
}  
